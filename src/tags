!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CharacterDemo	CharacterDemo.cpp	/^CharacterDemo::CharacterDemo()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo	CharacterDemo.cpp~	/^CharacterDemo::CharacterDemo()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::CharacterDemo	CharacterDemo.cpp	/^CharacterDemo::CharacterDemo()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::CharacterDemo	CharacterDemo.cpp~	/^CharacterDemo::CharacterDemo()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::clientMoveAndDisplay	CharacterDemo.cpp	/^void CharacterDemo::clientMoveAndDisplay()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::clientMoveAndDisplay	CharacterDemo.cpp~	/^void CharacterDemo::clientMoveAndDisplay()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::clientResetScene	CharacterDemo.cpp	/^void CharacterDemo::clientResetScene()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::clientResetScene	CharacterDemo.cpp~	/^void CharacterDemo::clientResetScene()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::debugDrawContacts	CharacterDemo.cpp	/^void	CharacterDemo::debugDrawContacts()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::debugDrawContacts	CharacterDemo.cpp~	/^void	CharacterDemo::debugDrawContacts()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::displayCallback	CharacterDemo.cpp	/^void CharacterDemo::displayCallback(void)$/;"	f	class:CharacterDemo	signature:(void)
CharacterDemo::displayCallback	CharacterDemo.cpp~	/^void CharacterDemo::displayCallback(void)$/;"	f	class:CharacterDemo	signature:(void)
CharacterDemo::initPhysics	CharacterDemo.cpp	/^void CharacterDemo::initPhysics()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::initPhysics	CharacterDemo.cpp~	/^void CharacterDemo::initPhysics()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::renderme	CharacterDemo.cpp	/^void CharacterDemo::renderme()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::renderme	CharacterDemo.cpp~	/^void CharacterDemo::renderme()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::specialKeyboard	CharacterDemo.cpp	/^void CharacterDemo::specialKeyboard( int key, int x, int y )$/;"	f	class:CharacterDemo	signature:( int key, int x, int y )
CharacterDemo::specialKeyboard	CharacterDemo.cpp~	/^void CharacterDemo::specialKeyboard( int key, int x, int y )$/;"	f	class:CharacterDemo	signature:( int key, int x, int y )
CharacterDemo::specialKeyboardUp	CharacterDemo.cpp	/^void CharacterDemo::specialKeyboardUp( int key, int x, int y )$/;"	f	class:CharacterDemo	signature:( int key, int x, int y )
CharacterDemo::specialKeyboardUp	CharacterDemo.cpp~	/^void CharacterDemo::specialKeyboardUp( int key, int x, int y )$/;"	f	class:CharacterDemo	signature:( int key, int x, int y )
CharacterDemo::updateCamera	CharacterDemo.cpp	/^void	CharacterDemo::updateCamera()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::updateCamera	CharacterDemo.cpp~	/^void	CharacterDemo::updateCamera()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::~CharacterDemo	CharacterDemo.cpp	/^CharacterDemo::~CharacterDemo()$/;"	f	class:CharacterDemo	signature:()
CharacterDemo::~CharacterDemo	CharacterDemo.cpp~	/^CharacterDemo::~CharacterDemo()$/;"	f	class:CharacterDemo	signature:()
CharacterInputListener	CharacterInputListener.cpp	/^CharacterInputListener::CharacterInputListener( Kinematic * pCharacter ) :$/;"	f	class:CharacterInputListener	signature:( Kinematic * pCharacter )
CharacterInputListener	CharacterInputListener.cpp~	/^CharacterInputListener::CharacterInputListener( Kinematic * pCharacter ) :$/;"	f	class:CharacterInputListener	signature:( Kinematic * pCharacter )
CharacterInputListener::CharacterInputListener	CharacterInputListener.cpp	/^CharacterInputListener::CharacterInputListener( Kinematic * pCharacter ) :$/;"	f	class:CharacterInputListener	signature:( Kinematic * pCharacter )
CharacterInputListener::CharacterInputListener	CharacterInputListener.cpp~	/^CharacterInputListener::CharacterInputListener( Kinematic * pCharacter ) :$/;"	f	class:CharacterInputListener	signature:( Kinematic * pCharacter )
CharacterInputListener::keyDown	CharacterInputListener.cpp	/^void CharacterInputListener::keyDown( const KeyEvent & evt )$/;"	f	class:CharacterInputListener	signature:( const KeyEvent & evt )
CharacterInputListener::keyDown	CharacterInputListener.cpp~	/^void CharacterInputListener::keyDown( const KeyEvent & evt )$/;"	f	class:CharacterInputListener	signature:( const KeyEvent & evt )
CharacterInputListener::keyUp	CharacterInputListener.cpp	/^void CharacterInputListener::keyUp( const KeyEvent & evt )$/;"	f	class:CharacterInputListener	signature:( const KeyEvent & evt )
CharacterInputListener::keyUp	CharacterInputListener.cpp~	/^void CharacterInputListener::keyUp( const KeyEvent & evt )$/;"	f	class:CharacterInputListener	signature:( const KeyEvent & evt )
CharacterInputListener::~CharacterInputListener	CharacterInputListener.cpp	/^CharacterInputListener::~CharacterInputListener()$/;"	f	class:CharacterInputListener	signature:()
CharacterInputListener::~CharacterInputListener	CharacterInputListener.cpp~	/^CharacterInputListener::~CharacterInputListener()$/;"	f	class:CharacterInputListener	signature:()
DynamicCharacterController	DynamicCharacterController.cpp	/^DynamicCharacterController::DynamicCharacterController ()$/;"	f	class:DynamicCharacterController	signature:()
DynamicCharacterController::DynamicCharacterController	DynamicCharacterController.cpp	/^DynamicCharacterController::DynamicCharacterController ()$/;"	f	class:DynamicCharacterController	signature:()
DynamicCharacterController::canJump	DynamicCharacterController.cpp	/^bool DynamicCharacterController::canJump () const$/;"	f	class:DynamicCharacterController	signature:() const
DynamicCharacterController::destroy	DynamicCharacterController.cpp	/^void DynamicCharacterController::destroy ()$/;"	f	class:DynamicCharacterController	signature:()
DynamicCharacterController::getCollisionObject	DynamicCharacterController.cpp	/^btCollisionObject* DynamicCharacterController::getCollisionObject ()$/;"	f	class:DynamicCharacterController	signature:()
DynamicCharacterController::jump	DynamicCharacterController.cpp	/^void DynamicCharacterController::jump ()$/;"	f	class:DynamicCharacterController	signature:()
DynamicCharacterController::onGround	DynamicCharacterController.cpp	/^bool DynamicCharacterController::onGround () const$/;"	f	class:DynamicCharacterController	signature:() const
DynamicCharacterController::playerStep	DynamicCharacterController.cpp	/^void DynamicCharacterController::playerStep (const btCollisionWorld* dynaWorld,btScalar dt,$/;"	f	class:DynamicCharacterController	signature:(const btCollisionWorld* dynaWorld,btScalar dt, int forward, int backward, int left, int right, int jump)
DynamicCharacterController::preStep	DynamicCharacterController.cpp	/^void DynamicCharacterController::preStep (const btCollisionWorld* collisionWorld)$/;"	f	class:DynamicCharacterController	signature:(const btCollisionWorld* collisionWorld)
DynamicCharacterController::registerPairCacheAndDispatcher	DynamicCharacterController.cpp	/^void DynamicCharacterController::registerPairCacheAndDispatcher (btOverlappingPairCache* pairCache, btCollisionDispatcher* dispatcher)$/;"	f	class:DynamicCharacterController	signature:(btOverlappingPairCache* pairCache, btCollisionDispatcher* dispatcher)
DynamicCharacterController::reset	DynamicCharacterController.cpp	/^void DynamicCharacterController::reset ()$/;"	f	class:DynamicCharacterController	signature:()
DynamicCharacterController::setup	DynamicCharacterController.cpp	/^void DynamicCharacterController::setup (btScalar height, btScalar width, btScalar stepHeight)$/;"	f	class:DynamicCharacterController	signature:(btScalar height, btScalar width, btScalar stepHeight)
DynamicCharacterController::warp	DynamicCharacterController.cpp	/^void DynamicCharacterController::warp (const btVector3& origin)$/;"	f	class:DynamicCharacterController	signature:(const btVector3& origin)
DynamicCharacterController::~DynamicCharacterController	DynamicCharacterController.cpp	/^DynamicCharacterController::~DynamicCharacterController ()$/;"	f	class:DynamicCharacterController	signature:()
GameBase	GameBase.cpp	/^GameBase::GameBase(void)$/;"	f	class:GameBase	signature:(void)
GameBase	GameBase.cpp~	/^GameBase::GameBase(void)$/;"	f	class:GameBase	signature:(void)
GameBase::GameBase	GameBase.cpp	/^GameBase::GameBase(void)$/;"	f	class:GameBase	signature:(void)
GameBase::GameBase	GameBase.cpp~	/^GameBase::GameBase(void)$/;"	f	class:GameBase	signature:(void)
GameBase::chooseSceneManager	GameBase.cpp	/^void GameBase::chooseSceneManager(void)$/;"	f	class:GameBase	signature:(void)
GameBase::chooseSceneManager	GameBase.cpp~	/^void GameBase::chooseSceneManager(void)$/;"	f	class:GameBase	signature:(void)
GameBase::configure	GameBase.cpp	/^bool GameBase::configure(void)$/;"	f	class:GameBase	signature:(void)
GameBase::configure	GameBase.cpp~	/^bool GameBase::configure(void)$/;"	f	class:GameBase	signature:(void)
GameBase::createFrameListener	GameBase.cpp	/^void GameBase::createFrameListener(void)$/;"	f	class:GameBase	signature:(void)
GameBase::createFrameListener	GameBase.cpp~	/^void GameBase::createFrameListener(void)$/;"	f	class:GameBase	signature:(void)
GameBase::createResourceListener	GameBase.cpp	/^void GameBase::createResourceListener(void)$/;"	f	class:GameBase	signature:(void)
GameBase::createResourceListener	GameBase.cpp~	/^void GameBase::createResourceListener(void)$/;"	f	class:GameBase	signature:(void)
GameBase::destroyScene	GameBase.cpp	/^void GameBase::destroyScene(void)$/;"	f	class:GameBase	signature:(void)
GameBase::destroyScene	GameBase.cpp~	/^void GameBase::destroyScene(void)$/;"	f	class:GameBase	signature:(void)
GameBase::frameEnded	GameBase.cpp~	/^bool GameBase::frameEnded(const Ogre::FrameEvent& evt)$/;"	f	class:GameBase	signature:(const Ogre::FrameEvent& evt)
GameBase::frameRenderingQueued	GameBase.cpp	/^bool GameBase::frameRenderingQueued(const Ogre::FrameEvent& evt)$/;"	f	class:GameBase	signature:(const Ogre::FrameEvent& evt)
GameBase::frameRenderingQueued	GameBase.cpp~	/^bool GameBase::frameRenderingQueued(const Ogre::FrameEvent& evt)$/;"	f	class:GameBase	signature:(const Ogre::FrameEvent& evt)
GameBase::frameStarted	GameBase.cpp~	/^bool GameBase::frameStarted(const Ogre::FrameEvent& evt)$/;"	f	class:GameBase	signature:(const Ogre::FrameEvent& evt)
GameBase::go	GameBase.cpp	/^void GameBase::go(void)$/;"	f	class:GameBase	signature:(void)
GameBase::go	GameBase.cpp~	/^void GameBase::go(void)$/;"	f	class:GameBase	signature:(void)
GameBase::keyPressed	GameBase.cpp	/^bool GameBase::keyPressed( const OIS::KeyEvent &evt )$/;"	f	class:GameBase	signature:( const OIS::KeyEvent &evt )
GameBase::keyPressed	GameBase.cpp~	/^bool GameBase::keyPressed( const OIS::KeyEvent &evt )$/;"	f	class:GameBase	signature:( const OIS::KeyEvent &evt )
GameBase::keyReleased	GameBase.cpp	/^bool GameBase::keyReleased( const OIS::KeyEvent & evt )$/;"	f	class:GameBase	signature:( const OIS::KeyEvent & evt )
GameBase::keyReleased	GameBase.cpp~	/^bool GameBase::keyReleased( const OIS::KeyEvent & evt )$/;"	f	class:GameBase	signature:( const OIS::KeyEvent & evt )
GameBase::loadResources	GameBase.cpp	/^void GameBase::loadResources(void)$/;"	f	class:GameBase	signature:(void)
GameBase::loadResources	GameBase.cpp~	/^void GameBase::loadResources(void)$/;"	f	class:GameBase	signature:(void)
GameBase::mouseMoved	GameBase.cpp	/^bool GameBase::mouseMoved( const OIS::MouseEvent & evt )$/;"	f	class:GameBase	signature:( const OIS::MouseEvent & evt )
GameBase::mouseMoved	GameBase.cpp~	/^bool GameBase::mouseMoved( const OIS::MouseEvent & evt )$/;"	f	class:GameBase	signature:( const OIS::MouseEvent & evt )
GameBase::mousePressed	GameBase.cpp	/^bool GameBase::mousePressed( const OIS::MouseEvent &evt, OIS::MouseButtonID id )$/;"	f	class:GameBase	signature:( const OIS::MouseEvent &evt, OIS::MouseButtonID id )
GameBase::mousePressed	GameBase.cpp~	/^bool GameBase::mousePressed( const OIS::MouseEvent &evt, OIS::MouseButtonID id )$/;"	f	class:GameBase	signature:( const OIS::MouseEvent &evt, OIS::MouseButtonID id )
GameBase::mouseReleased	GameBase.cpp	/^bool GameBase::mouseReleased( const OIS::MouseEvent &evt, OIS::MouseButtonID id )$/;"	f	class:GameBase	signature:( const OIS::MouseEvent &evt, OIS::MouseButtonID id )
GameBase::mouseReleased	GameBase.cpp~	/^bool GameBase::mouseReleased( const OIS::MouseEvent &evt, OIS::MouseButtonID id )$/;"	f	class:GameBase	signature:( const OIS::MouseEvent &evt, OIS::MouseButtonID id )
GameBase::setup	GameBase.cpp	/^bool GameBase::setup(void)$/;"	f	class:GameBase	signature:(void)
GameBase::setup	GameBase.cpp~	/^bool GameBase::setup(void)$/;"	f	class:GameBase	signature:(void)
GameBase::setupResources	GameBase.cpp	/^void GameBase::setupResources(void)$/;"	f	class:GameBase	signature:(void)
GameBase::setupResources	GameBase.cpp~	/^void GameBase::setupResources(void)$/;"	f	class:GameBase	signature:(void)
GameBase::windowClosed	GameBase.cpp	/^void GameBase::windowClosed(Ogre::RenderWindow* rw)$/;"	f	class:GameBase	signature:(Ogre::RenderWindow* rw)
GameBase::windowClosed	GameBase.cpp~	/^void GameBase::windowClosed(Ogre::RenderWindow* rw)$/;"	f	class:GameBase	signature:(Ogre::RenderWindow* rw)
GameBase::windowResized	GameBase.cpp	/^void GameBase::windowResized(Ogre::RenderWindow* rw)$/;"	f	class:GameBase	signature:(Ogre::RenderWindow* rw)
GameBase::windowResized	GameBase.cpp~	/^void GameBase::windowResized(Ogre::RenderWindow* rw)$/;"	f	class:GameBase	signature:(Ogre::RenderWindow* rw)
GameBase::~GameBase	GameBase.cpp	/^GameBase::~GameBase(void)$/;"	f	class:GameBase	signature:(void)
GameBase::~GameBase	GameBase.cpp~	/^GameBase::~GameBase(void)$/;"	f	class:GameBase	signature:(void)
GameMap	GameMap.cpp	/^GameMap::GameMap( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight ) :$/;"	f	class:GameMap	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )
GameMap	GameMap.cpp	/^GameMap::GameMap(void) :$/;"	f	class:GameMap	signature:(void)
GameMap	GameMap.cpp~	/^GameMap::GameMap( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight ) :$/;"	f	class:GameMap	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )
GameMap	GameMap.cpp~	/^GameMap::GameMap(void) :$/;"	f	class:GameMap	signature:(void)
GameMap::GameMap	GameMap.cpp	/^GameMap::GameMap( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight ) :$/;"	f	class:GameMap	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )
GameMap::GameMap	GameMap.cpp	/^GameMap::GameMap(void) :$/;"	f	class:GameMap	signature:(void)
GameMap::GameMap	GameMap.cpp~	/^GameMap::GameMap( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight ) :$/;"	f	class:GameMap	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )
GameMap::GameMap	GameMap.cpp~	/^GameMap::GameMap(void) :$/;"	f	class:GameMap	signature:(void)
GameMap::cleanMap	GameMap.cpp	/^void GameMap::cleanMap(void)$/;"	f	class:GameMap	signature:(void)
GameMap::cleanMap	GameMap.cpp~	/^void GameMap::cleanMap(void)$/;"	f	class:GameMap	signature:(void)
GameMap::configureTerrainDefaults	GameMap.cpp	/^void GameMap::configureTerrainDefaults( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )$/;"	f	class:GameMap	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )
GameMap::configureTerrainDefaults	GameMap.cpp~	/^void GameMap::configureTerrainDefaults( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )$/;"	f	class:GameMap	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )
GameMap::createFrameListener	GameMap.cpp	/^void GameMap::createFrameListener( OgreBites::SdkTrayManager * pTrayMgr )$/;"	f	class:GameMap	signature:( OgreBites::SdkTrayManager * pTrayMgr )
GameMap::createFrameListener	GameMap.cpp~	/^void GameMap::createFrameListener( OgreBites::SdkTrayManager * pTrayMgr )$/;"	f	class:GameMap	signature:( OgreBites::SdkTrayManager * pTrayMgr )
GameMap::defineTerrain	GameMap.cpp	/^void GameMap::defineTerrain( long x, long y )$/;"	f	class:GameMap	signature:( long x, long y )
GameMap::defineTerrain	GameMap.cpp~	/^void GameMap::defineTerrain( long x, long y )$/;"	f	class:GameMap	signature:( long x, long y )
GameMap::frameRenderingQueued	GameMap.cpp	/^void GameMap::frameRenderingQueued( OgreBites::SdkTrayManager * pTrayMgr )$/;"	f	class:GameMap	signature:( OgreBites::SdkTrayManager * pTrayMgr )
GameMap::frameRenderingQueued	GameMap.cpp~	/^void GameMap::frameRenderingQueued( OgreBites::SdkTrayManager * pTrayMgr )$/;"	f	class:GameMap	signature:( OgreBites::SdkTrayManager * pTrayMgr )
GameMap::initBlendMaps	GameMap.cpp	/^void GameMap::initBlendMaps( Ogre::Terrain * terrain )$/;"	f	class:GameMap	signature:( Ogre::Terrain * terrain )
GameMap::initBlendMaps	GameMap.cpp~	/^void GameMap::initBlendMaps( Ogre::Terrain * terrain )$/;"	f	class:GameMap	signature:( Ogre::Terrain * terrain )
GameMap::initMap	GameMap.cpp	/^void GameMap::initMap( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )$/;"	f	class:GameMap	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )
GameMap::initMap	GameMap.cpp~	/^void GameMap::initMap( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )$/;"	f	class:GameMap	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )
GameMap::~GameMap	GameMap.cpp	/^GameMap::~GameMap(void)$/;"	f	class:GameMap	signature:(void)
GameMap::~GameMap	GameMap.cpp~	/^GameMap::~GameMap(void)$/;"	f	class:GameMap	signature:(void)
GamePlayer	GamePlayer.cpp	/^GamePlayer::GamePlayer( SceneManager * pSceneMgr, SceneNode * pCameraNode, MotionSet * pMotionSet ) :$/;"	f	class:GamePlayer	signature:( SceneManager * pSceneMgr, SceneNode * pCameraNode, MotionSet * pMotionSet )
GamePlayer	GamePlayer.cpp~	/^GamePlayer::GamePlayer( SceneManager * pSceneMgr, SceneNode * pCameraNode, MotionSet * pMotionSet ) :$/;"	f	class:GamePlayer	signature:( SceneManager * pSceneMgr, SceneNode * pCameraNode, MotionSet * pMotionSet )
GamePlayer::GamePlayer	GamePlayer.cpp	/^GamePlayer::GamePlayer( SceneManager * pSceneMgr, SceneNode * pCameraNode, MotionSet * pMotionSet ) :$/;"	f	class:GamePlayer	signature:( SceneManager * pSceneMgr, SceneNode * pCameraNode, MotionSet * pMotionSet )
GamePlayer::GamePlayer	GamePlayer.cpp~	/^GamePlayer::GamePlayer( SceneManager * pSceneMgr, SceneNode * pCameraNode, MotionSet * pMotionSet ) :$/;"	f	class:GamePlayer	signature:( SceneManager * pSceneMgr, SceneNode * pCameraNode, MotionSet * pMotionSet )
GamePlayer::addTime	GamePlayer.cpp	/^void GamePlayer::addTime( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
GamePlayer::addTime	GamePlayer.cpp~	/^void GamePlayer::addTime( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
GamePlayer::fadeAnimations	GamePlayer.cpp	/^void GamePlayer::fadeAnimations( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
GamePlayer::fadeAnimations	GamePlayer.cpp~	/^void GamePlayer::fadeAnimations( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
GamePlayer::injectKeyDown	GamePlayer.cpp	/^void GamePlayer::injectKeyDown( const OIS::KeyEvent & evt )$/;"	f	class:GamePlayer	signature:( const OIS::KeyEvent & evt )
GamePlayer::injectKeyDown	GamePlayer.cpp~	/^void GamePlayer::injectKeyDown( const OIS::KeyEvent & evt )$/;"	f	class:GamePlayer	signature:( const OIS::KeyEvent & evt )
GamePlayer::injectKeyUp	GamePlayer.cpp	/^void GamePlayer::injectKeyUp( const OIS::KeyEvent & evt )$/;"	f	class:GamePlayer	signature:( const OIS::KeyEvent & evt )
GamePlayer::injectKeyUp	GamePlayer.cpp~	/^void GamePlayer::injectKeyUp( const OIS::KeyEvent & evt )$/;"	f	class:GamePlayer	signature:( const OIS::KeyEvent & evt )
GamePlayer::injectMouseDown	GamePlayer.cpp	/^void GamePlayer::injectMouseDown( const OIS::MouseEvent & evt, OIS::MouseButtonID id )$/;"	f	class:GamePlayer	signature:( const OIS::MouseEvent & evt, OIS::MouseButtonID id )
GamePlayer::injectMouseDown	GamePlayer.cpp~	/^void GamePlayer::injectMouseDown( const OIS::MouseEvent & evt, OIS::MouseButtonID id )$/;"	f	class:GamePlayer	signature:( const OIS::MouseEvent & evt, OIS::MouseButtonID id )
GamePlayer::setBaseAnimation	GamePlayer.cpp	/^void GamePlayer::setBaseAnimation( AnimID id, bool reset \/*= false*\/ )$/;"	f	class:GamePlayer	signature:( AnimID id, bool reset )
GamePlayer::setBaseAnimation	GamePlayer.cpp~	/^void GamePlayer::setBaseAnimation( AnimID id, bool reset \/*= false*\/ )$/;"	f	class:GamePlayer	signature:( AnimID id, bool reset )
GamePlayer::setTopAnimation	GamePlayer.cpp	/^void GamePlayer::setTopAnimation( AnimID id, bool reset \/*= false*\/ )$/;"	f	class:GamePlayer	signature:( AnimID id, bool reset )
GamePlayer::setTopAnimation	GamePlayer.cpp~	/^void GamePlayer::setTopAnimation( AnimID id, bool reset \/*= false*\/ )$/;"	f	class:GamePlayer	signature:( AnimID id, bool reset )
GamePlayer::setupAnimations	GamePlayer.cpp	/^void GamePlayer::setupAnimations()$/;"	f	class:GamePlayer	signature:()
GamePlayer::setupAnimations	GamePlayer.cpp~	/^void GamePlayer::setupAnimations()$/;"	f	class:GamePlayer	signature:()
GamePlayer::setupBody	GamePlayer.cpp	/^void GamePlayer::setupBody( SceneManager * pSceneMgr )$/;"	f	class:GamePlayer	signature:( SceneManager * pSceneMgr )
GamePlayer::setupBody	GamePlayer.cpp~	/^void GamePlayer::setupBody( SceneManager * pSceneMgr )$/;"	f	class:GamePlayer	signature:( SceneManager * pSceneMgr )
GamePlayer::updateAnimations	GamePlayer.cpp	/^void GamePlayer::updateAnimations( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
GamePlayer::updateAnimations	GamePlayer.cpp~	/^void GamePlayer::updateAnimations( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
GamePlayer::updateBody	GamePlayer.cpp	/^void GamePlayer::updateBody( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
GamePlayer::updateBody	GamePlayer.cpp~	/^void GamePlayer::updateBody( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
KinematicCharacter	KinematicCharacter.cpp	/^KinematicCharacter::KinematicCharacter($/;"	f	class:KinematicCharacter	signature:( SceneNode * pNode, btPairCachingGhostObject * ghostObject, btConvexShape * convexShape, btScalar stepHeight, int upAxis )
KinematicCharacter	KinematicCharacter.cpp~	/^KinematicCharacter::KinematicCharacter($/;"	f	class:KinematicCharacter	signature:( SceneNode * pNode, btPairCachingGhostObject * ghostObject, btConvexShape * convexShape, btScalar stepHeight, int upAxis )
KinematicCharacter::KinematicCharacter	KinematicCharacter.cpp	/^KinematicCharacter::KinematicCharacter($/;"	f	class:KinematicCharacter	signature:( SceneNode * pNode, btPairCachingGhostObject * ghostObject, btConvexShape * convexShape, btScalar stepHeight, int upAxis )
KinematicCharacter::KinematicCharacter	KinematicCharacter.cpp~	/^KinematicCharacter::KinematicCharacter($/;"	f	class:KinematicCharacter	signature:( SceneNode * pNode, btPairCachingGhostObject * ghostObject, btConvexShape * convexShape, btScalar stepHeight, int upAxis )
KinematicCharacter::getCharacterNode	KinematicCharacter.cpp	/^Ogre::SceneNode * KinematicCharacter::getCharacterNode()$/;"	f	class:KinematicCharacter	signature:()
KinematicCharacter::getCharacterNode	KinematicCharacter.cpp~	/^Ogre::SceneNode * KinematicCharacter::getCharacterNode()$/;"	f	class:KinematicCharacter	signature:()
KinematicCharacter::setCharacterWalkDirection	KinematicCharacter.cpp	/^void KinematicCharacter::setCharacterWalkDirection( const btVector3 & pWalkDirection )$/;"	f	class:KinematicCharacter	signature:( const btVector3 & pWalkDirection )
KinematicCharacter::setWorldTransform	KinematicCharacter.cpp	/^void KinematicCharacter::setWorldTransform( const btTransform & pWorldTrans )$/;"	f	class:KinematicCharacter	signature:( const btTransform & pWorldTrans )
KinematicCharacter::setWorldTransform	KinematicCharacter.cpp~	/^void KinematicCharacter::setWorldTransform( const btTransform & pWorldTrans )$/;"	f	class:KinematicCharacter	signature:( const btTransform & pWorldTrans )
KinematicCharacter::~KinematicCharacter	KinematicCharacter.cpp	/^KinematicCharacter::~KinematicCharacter()$/;"	f	class:KinematicCharacter	signature:()
KinematicCharacter::~KinematicCharacter	KinematicCharacter.cpp~	/^KinematicCharacter::~KinematicCharacter()$/;"	f	class:KinematicCharacter	signature:()
MotionState	MotionState.cpp	/^MotionState::MotionState( const btTransform & pInitialPos, Ogre::SceneNode * pNode )$/;"	f	class:MotionState	signature:( const btTransform & pInitialPos, Ogre::SceneNode * pNode )
MotionState::MotionState	MotionState.cpp	/^MotionState::MotionState( const btTransform & pInitialPos, Ogre::SceneNode * pNode )$/;"	f	class:MotionState	signature:( const btTransform & pInitialPos, Ogre::SceneNode * pNode )
MotionState::getWorldTransform	MotionState.cpp	/^void MotionState::getWorldTransform( btTransform & pWorldTrans ) const$/;"	f	class:MotionState	signature:( btTransform & pWorldTrans ) const
MotionState::setNode	MotionState.cpp	/^void MotionState::setNode( Ogre::SceneNode * pNode )$/;"	f	class:MotionState	signature:( Ogre::SceneNode * pNode )
MotionState::setPlayerPosition	MotionState.cpp	/^void MotionState::setPlayerPosition( btTransform & pCurrentPos )$/;"	f	class:MotionState	signature:( btTransform & pCurrentPos )
MotionState::setWorldTransform	MotionState.cpp	/^void MotionState::setWorldTransform( const btTransform & pWorldTrans )$/;"	f	class:MotionState	signature:( const btTransform & pWorldTrans )
MotionState::~MotionState	MotionState.cpp	/^MotionState::~MotionState()$/;"	f	class:MotionState	signature:()
PhysicsBase	PhysicsBase.cpp	/^PhysicsBase::PhysicsBase($/;"	f	class:PhysicsBase	signature:( Ogre::SceneManager * pSceneMgr, GameMap * pTerrain, GamePlayer * pPlayer, MotionSet * pMotionSet, Ogre::Vector3 gravityVector, Ogre::AxisAlignedBox bounds )
PhysicsBase	PhysicsBase.cpp~	/^PhysicsBase::PhysicsBase($/;"	f	class:PhysicsBase	signature:( Ogre::SceneManager * pSceneMgr, GameMap * pTerrain, GamePlayer * pPlayer, MotionSet * pMotionSet, Ogre::Vector3 gravityVector, Ogre::AxisAlignedBox bounds )
PhysicsBase::PhysicsBase	PhysicsBase.cpp	/^PhysicsBase::PhysicsBase($/;"	f	class:PhysicsBase	signature:( Ogre::SceneManager * pSceneMgr, GameMap * pTerrain, GamePlayer * pPlayer, MotionSet * pMotionSet, Ogre::Vector3 gravityVector, Ogre::AxisAlignedBox bounds )
PhysicsBase::PhysicsBase	PhysicsBase.cpp~	/^PhysicsBase::PhysicsBase($/;"	f	class:PhysicsBase	signature:( Ogre::SceneManager * pSceneMgr, GameMap * pTerrain, GamePlayer * pPlayer, MotionSet * pMotionSet, Ogre::Vector3 gravityVector, Ogre::AxisAlignedBox bounds )
PhysicsBase::destroyPhysicsWorld	PhysicsBase.cpp	/^void PhysicsBase::destroyPhysicsWorld()$/;"	f	class:PhysicsBase	signature:()
PhysicsBase::destroyPhysicsWorld	PhysicsBase.cpp~	/^void PhysicsBase::destroyPhysicsWorld()$/;"	f	class:PhysicsBase	signature:()
PhysicsBase::frameEnded	PhysicsBase.cpp	/^bool PhysicsBase::frameEnded( const FrameEvent & evt )$/;"	f	class:PhysicsBase	signature:( const FrameEvent & evt )
PhysicsBase::frameEnded	PhysicsBase.cpp~	/^bool PhysicsBase::frameEnded( const FrameEvent & evt )$/;"	f	class:PhysicsBase	signature:( const FrameEvent & evt )
PhysicsBase::frameStarted	PhysicsBase.cpp	/^bool PhysicsBase::frameStarted( const FrameEvent & evt )$/;"	f	class:PhysicsBase	signature:( const FrameEvent & evt )
PhysicsBase::frameStarted	PhysicsBase.cpp~	/^bool PhysicsBase::frameStarted( const FrameEvent & evt )$/;"	f	class:PhysicsBase	signature:( const FrameEvent & evt )
PhysicsBase::initPhysicsWorld	PhysicsBase.cpp	/^void PhysicsBase::initPhysicsWorld()$/;"	f	class:PhysicsBase	signature:()
PhysicsBase::initPhysicsWorld	PhysicsBase.cpp~	/^void PhysicsBase::initPhysicsWorld()$/;"	f	class:PhysicsBase	signature:()
PhysicsBase::keyDown	PhysicsBase.cpp	/^void PhysicsBase::keyDown( const OIS::KeyEvent & evt )$/;"	f	class:PhysicsBase	signature:( const OIS::KeyEvent & evt )
PhysicsBase::keyDown	PhysicsBase.cpp~	/^void PhysicsBase::keyDown( const OIS::KeyEvent & evt )$/;"	f	class:PhysicsBase	signature:( const OIS::KeyEvent & evt )
PhysicsBase::keyUp	PhysicsBase.cpp	/^void PhysicsBase::keyUp( const OIS::KeyEvent & evt )$/;"	f	class:PhysicsBase	signature:( const OIS::KeyEvent & evt )
PhysicsBase::keyUp	PhysicsBase.cpp~	/^void PhysicsBase::keyUp( const OIS::KeyEvent & evt )$/;"	f	class:PhysicsBase	signature:( const OIS::KeyEvent & evt )
PhysicsBase::updatePhysicsPlayer	PhysicsBase.cpp	/^void PhysicsBase::updatePhysicsPlayer()$/;"	f	class:PhysicsBase	signature:()
PhysicsBase::updatePhysicsPlayer	PhysicsBase.cpp~	/^void PhysicsBase::updatePhysicsPlayer()$/;"	f	class:PhysicsBase	signature:()
PhysicsBase::~PhysicsBase	PhysicsBase.cpp	/^PhysicsBase::~PhysicsBase()$/;"	f	class:PhysicsBase	signature:()
PhysicsBase::~PhysicsBase	PhysicsBase.cpp~	/^PhysicsBase::~PhysicsBase()$/;"	f	class:PhysicsBase	signature:()
PhysicsFrameListener	PhysicsFrameListener.cpp	/^PhysicsFrameListener::PhysicsFrameListener($/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, GameMap * pTerrain, GamePlayer * pPlayer, MotionSet * pMotionSet, Ogre::Vector3 gravityVector, Ogre::AxisAlignedBox bounds )
PhysicsFrameListener	PhysicsFrameListener.cpp_	/^PhysicsFrameListener::PhysicsFrameListener($/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, GameMap * pMap, GamePlayer * pPlayer, Ogre::Vector3 gravityVector, Ogre::AxisAlignedBox bounds )
PhysicsFrameListener	PhysicsFrameListener.cpp_backup	/^PhysicsFrameListener::PhysicsFrameListener($/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, GameMap * pMap, GamePlayer * pPlayer, Ogre::Vector3 gravityVector, Ogre::AxisAlignedBox bounds )
PhysicsFrameListener	PhysicsFrameListener.cpp~	/^PhysicsFrameListener::PhysicsFrameListener($/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, GameMap * pTerrain, GamePlayer * pPlayer, MotionSet * pMotionSet, Ogre::Vector3 gravityVector, Ogre::AxisAlignedBox bounds )
PhysicsFrameListener::PhysicsFrameListener	PhysicsFrameListener.cpp	/^PhysicsFrameListener::PhysicsFrameListener($/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, GameMap * pTerrain, GamePlayer * pPlayer, MotionSet * pMotionSet, Ogre::Vector3 gravityVector, Ogre::AxisAlignedBox bounds )
PhysicsFrameListener::PhysicsFrameListener	PhysicsFrameListener.cpp_	/^PhysicsFrameListener::PhysicsFrameListener($/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, GameMap * pMap, GamePlayer * pPlayer, Ogre::Vector3 gravityVector, Ogre::AxisAlignedBox bounds )
PhysicsFrameListener::PhysicsFrameListener	PhysicsFrameListener.cpp_backup	/^PhysicsFrameListener::PhysicsFrameListener($/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, GameMap * pMap, GamePlayer * pPlayer, Ogre::Vector3 gravityVector, Ogre::AxisAlignedBox bounds )
PhysicsFrameListener::PhysicsFrameListener	PhysicsFrameListener.cpp~	/^PhysicsFrameListener::PhysicsFrameListener($/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, GameMap * pTerrain, GamePlayer * pPlayer, MotionSet * pMotionSet, Ogre::Vector3 gravityVector, Ogre::AxisAlignedBox bounds )
PhysicsFrameListener::addTime	PhysicsFrameListener.cpp_	/^void PhysicsFrameListener::addTime( Real deltaTime )$/;"	f	class:PhysicsFrameListener	signature:( Real deltaTime )
PhysicsFrameListener::addTime	PhysicsFrameListener.cpp_backup	/^void PhysicsFrameListener::addTime( Real deltaTime )$/;"	f	class:PhysicsFrameListener	signature:( Real deltaTime )
PhysicsFrameListener::createBox	PhysicsFrameListener.cpp	/^void PhysicsFrameListener::createBox( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )
PhysicsFrameListener::createBox	PhysicsFrameListener.cpp_	/^void PhysicsFrameListener::createBox( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )
PhysicsFrameListener::createBox	PhysicsFrameListener.cpp_backup	/^void PhysicsFrameListener::createBox( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )
PhysicsFrameListener::createBox	PhysicsFrameListener.cpp~	/^void PhysicsFrameListener::createBox( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )
PhysicsFrameListener::createBoxShape	PhysicsFrameListener.cpp	/^void PhysicsFrameListener::createBoxShape( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic \/*= false*\/ )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic )
PhysicsFrameListener::createBoxShape	PhysicsFrameListener.cpp_	/^void PhysicsFrameListener::createBoxShape( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic \/*= false*\/ )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic )
PhysicsFrameListener::createBoxShape	PhysicsFrameListener.cpp_backup	/^void PhysicsFrameListener::createBoxShape( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic \/*= false*\/ )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic )
PhysicsFrameListener::createBoxShape	PhysicsFrameListener.cpp~	/^void PhysicsFrameListener::createBoxShape( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic \/*= false*\/ )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic )
PhysicsFrameListener::createKinematicShape	PhysicsFrameListener.cpp_	/^void PhysicsFrameListener::createKinematicShape( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic \/*= false*\/ )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic )
PhysicsFrameListener::createKinematicShape	PhysicsFrameListener.cpp_backup	/^void PhysicsFrameListener::createKinematicShape( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic \/*= false*\/ )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic )
PhysicsFrameListener::createPhysicsPlayer	PhysicsFrameListener.cpp	/^void PhysicsFrameListener::createPhysicsPlayer()$/;"	f	class:PhysicsFrameListener	signature:()
PhysicsFrameListener::createPhysicsPlayer	PhysicsFrameListener.cpp~	/^void PhysicsFrameListener::createPhysicsPlayer()$/;"	f	class:PhysicsFrameListener	signature:()
PhysicsFrameListener::createPhysicsScene	PhysicsFrameListener.cpp	/^void PhysicsFrameListener::createPhysicsScene()$/;"	f	class:PhysicsFrameListener	signature:()
PhysicsFrameListener::createPhysicsScene	PhysicsFrameListener.cpp~	/^void PhysicsFrameListener::createPhysicsScene()$/;"	f	class:PhysicsFrameListener	signature:()
PhysicsFrameListener::createPhysicsTerrain	PhysicsFrameListener.cpp	/^void PhysicsFrameListener::createPhysicsTerrain()$/;"	f	class:PhysicsFrameListener	signature:()
PhysicsFrameListener::createPhysicsTerrain	PhysicsFrameListener.cpp~	/^void PhysicsFrameListener::createPhysicsTerrain()$/;"	f	class:PhysicsFrameListener	signature:()
PhysicsFrameListener::createPlayerPhysicsBody	PhysicsFrameListener.cpp_	/^void PhysicsFrameListener::createPlayerPhysicsBody( GamePlayer * pPlayer )$/;"	f	class:PhysicsFrameListener	signature:( GamePlayer * pPlayer )
PhysicsFrameListener::createPlayerPhysicsBody	PhysicsFrameListener.cpp_backup	/^void PhysicsFrameListener::createPlayerPhysicsBody( GamePlayer * pPlayer )$/;"	f	class:PhysicsFrameListener	signature:( GamePlayer * pPlayer )
PhysicsFrameListener::destroyPhysicsWorld	PhysicsFrameListener.cpp	/^void PhysicsFrameListener::destroyPhysicsWorld()$/;"	f	class:PhysicsFrameListener	signature:()
PhysicsFrameListener::destroyPhysicsWorld	PhysicsFrameListener.cpp~	/^void PhysicsFrameListener::destroyPhysicsWorld()$/;"	f	class:PhysicsFrameListener	signature:()
PhysicsFrameListener::frameEnded	PhysicsFrameListener.cpp_	/^bool PhysicsFrameListener::frameEnded( const FrameEvent & evt )$/;"	f	class:PhysicsFrameListener	signature:( const FrameEvent & evt )
PhysicsFrameListener::frameEnded	PhysicsFrameListener.cpp_backup	/^bool PhysicsFrameListener::frameEnded( const FrameEvent & evt )$/;"	f	class:PhysicsFrameListener	signature:( const FrameEvent & evt )
PhysicsFrameListener::frameStarted	PhysicsFrameListener.cpp_	/^bool PhysicsFrameListener::frameStarted( const FrameEvent & evt )$/;"	f	class:PhysicsFrameListener	signature:( const FrameEvent & evt )
PhysicsFrameListener::frameStarted	PhysicsFrameListener.cpp_backup	/^bool PhysicsFrameListener::frameStarted( const FrameEvent & evt )$/;"	f	class:PhysicsFrameListener	signature:( const FrameEvent & evt )
PhysicsFrameListener::updatePhysicsPlayer	PhysicsFrameListener.cpp	/^void PhysicsFrameListener::updatePhysicsPlayer()$/;"	f	class:PhysicsFrameListener	signature:()
PhysicsFrameListener::updatePhysicsPlayer	PhysicsFrameListener.cpp~	/^void PhysicsFrameListener::updatePhysicsPlayer()$/;"	f	class:PhysicsFrameListener	signature:()
PhysicsFrameListener::updatePlayerPhysicsBody	PhysicsFrameListener.cpp_	/^void PhysicsFrameListener::updatePlayerPhysicsBody( Real deltaTime )$/;"	f	class:PhysicsFrameListener	signature:( Real deltaTime )
PhysicsFrameListener::updatePlayerPhysicsBody	PhysicsFrameListener.cpp_backup	/^void PhysicsFrameListener::updatePlayerPhysicsBody( Real deltaTime )$/;"	f	class:PhysicsFrameListener	signature:( Real deltaTime )
PhysicsFrameListener::~PhysicsFrameListener	PhysicsFrameListener.cpp	/^PhysicsFrameListener::~PhysicsFrameListener()$/;"	f	class:PhysicsFrameListener	signature:()
PhysicsFrameListener::~PhysicsFrameListener	PhysicsFrameListener.cpp_	/^PhysicsFrameListener::~PhysicsFrameListener()$/;"	f	class:PhysicsFrameListener	signature:()
PhysicsFrameListener::~PhysicsFrameListener	PhysicsFrameListener.cpp_backup	/^PhysicsFrameListener::~PhysicsFrameListener()$/;"	f	class:PhysicsFrameListener	signature:()
PhysicsFrameListener::~PhysicsFrameListener	PhysicsFrameListener.cpp~	/^PhysicsFrameListener::~PhysicsFrameListener()$/;"	f	class:PhysicsFrameListener	signature:()
SeekSeekSeek	SeekSeekSeek.cpp	/^SeekSeekSeek::SeekSeekSeek(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek	SeekSeekSeek.cpp~	/^SeekSeekSeek::SeekSeekSeek(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::SeekSeekSeek	SeekSeekSeek.cpp	/^SeekSeekSeek::SeekSeekSeek(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::SeekSeekSeek	SeekSeekSeek.cpp~	/^SeekSeekSeek::SeekSeekSeek(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::createCamera	SeekSeekSeek.cpp	/^void SeekSeekSeek::createCamera(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::createCamera	SeekSeekSeek.cpp~	/^void SeekSeekSeek::createCamera(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::createEnvir	SeekSeekSeek.cpp	/^void SeekSeekSeek::createEnvir(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::createEnvir	SeekSeekSeek.cpp~	/^void SeekSeekSeek::createEnvir(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::createFrameListener	SeekSeekSeek.cpp	/^void SeekSeekSeek::createFrameListener(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::createFrameListener	SeekSeekSeek.cpp~	/^void SeekSeekSeek::createFrameListener(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::createScene	SeekSeekSeek.cpp	/^void SeekSeekSeek::createScene(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::createScene	SeekSeekSeek.cpp~	/^void SeekSeekSeek::createScene(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::createViewports	SeekSeekSeek.cpp	/^void SeekSeekSeek::createViewports(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::createViewports	SeekSeekSeek.cpp~	/^void SeekSeekSeek::createViewports(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::destroyScene	SeekSeekSeek.cpp	/^void SeekSeekSeek::destroyScene(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::destroyScene	SeekSeekSeek.cpp~	/^void SeekSeekSeek::destroyScene(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::frameRenderingQueued	SeekSeekSeek.cpp	/^bool SeekSeekSeek::frameRenderingQueued(const Ogre::FrameEvent& evt)$/;"	f	class:SeekSeekSeek	signature:(const Ogre::FrameEvent& evt)
SeekSeekSeek::frameRenderingQueued	SeekSeekSeek.cpp~	/^bool SeekSeekSeek::frameRenderingQueued(const Ogre::FrameEvent& evt)$/;"	f	class:SeekSeekSeek	signature:(const Ogre::FrameEvent& evt)
SeekSeekSeek::keyPressed	SeekSeekSeek.cpp	/^bool SeekSeekSeek::keyPressed( const OIS::KeyEvent & evt )$/;"	f	class:SeekSeekSeek	signature:( const OIS::KeyEvent & evt )
SeekSeekSeek::keyPressed	SeekSeekSeek.cpp~	/^bool SeekSeekSeek::keyPressed( const OIS::KeyEvent & evt )$/;"	f	class:SeekSeekSeek	signature:( const OIS::KeyEvent & evt )
SeekSeekSeek::keyReleased	SeekSeekSeek.cpp	/^bool SeekSeekSeek::keyReleased( const OIS::KeyEvent & evt )$/;"	f	class:SeekSeekSeek	signature:( const OIS::KeyEvent & evt )
SeekSeekSeek::keyReleased	SeekSeekSeek.cpp~	/^bool SeekSeekSeek::keyReleased( const OIS::KeyEvent & evt )$/;"	f	class:SeekSeekSeek	signature:( const OIS::KeyEvent & evt )
SeekSeekSeek::mouseMoved	SeekSeekSeek.cpp	/^bool SeekSeekSeek::mouseMoved( const OIS::MouseEvent & evt )$/;"	f	class:SeekSeekSeek	signature:( const OIS::MouseEvent & evt )
SeekSeekSeek::mouseMoved	SeekSeekSeek.cpp~	/^bool SeekSeekSeek::mouseMoved( const OIS::MouseEvent & evt )$/;"	f	class:SeekSeekSeek	signature:( const OIS::MouseEvent & evt )
SeekSeekSeek::mousePressed	SeekSeekSeek.cpp	/^bool SeekSeekSeek::mousePressed( const OIS::MouseEvent & evt, OIS::MouseButtonID id )$/;"	f	class:SeekSeekSeek	signature:( const OIS::MouseEvent & evt, OIS::MouseButtonID id )
SeekSeekSeek::mousePressed	SeekSeekSeek.cpp~	/^bool SeekSeekSeek::mousePressed( const OIS::MouseEvent & evt, OIS::MouseButtonID id )$/;"	f	class:SeekSeekSeek	signature:( const OIS::MouseEvent & evt, OIS::MouseButtonID id )
SeekSeekSeek::mouseReleased	SeekSeekSeek.cpp	/^bool SeekSeekSeek::mouseReleased( const OIS::MouseEvent & evt, OIS::MouseButtonID id )$/;"	f	class:SeekSeekSeek	signature:( const OIS::MouseEvent & evt, OIS::MouseButtonID id )
SeekSeekSeek::mouseReleased	SeekSeekSeek.cpp~	/^bool SeekSeekSeek::mouseReleased( const OIS::MouseEvent & evt, OIS::MouseButtonID id )$/;"	f	class:SeekSeekSeek	signature:( const OIS::MouseEvent & evt, OIS::MouseButtonID id )
SeekSeekSeek::updateCamera	SeekSeekSeek.cpp	/^void SeekSeekSeek::updateCamera( Real deltaTime )$/;"	f	class:SeekSeekSeek	signature:( Real deltaTime )
SeekSeekSeek::updateCamera	SeekSeekSeek.cpp~	/^void SeekSeekSeek::updateCamera( Real deltaTime )$/;"	f	class:SeekSeekSeek	signature:( Real deltaTime )
SeekSeekSeek::updateCameraGoal	SeekSeekSeek.cpp	/^void SeekSeekSeek::updateCameraGoal( Real deltaYaw, Real deltaPitch, Real deltaZoom )$/;"	f	class:SeekSeekSeek	signature:( Real deltaYaw, Real deltaPitch, Real deltaZoom )
SeekSeekSeek::updateCameraGoal	SeekSeekSeek.cpp~	/^void SeekSeekSeek::updateCameraGoal( Real deltaYaw, Real deltaPitch, Real deltaZoom )$/;"	f	class:SeekSeekSeek	signature:( Real deltaYaw, Real deltaPitch, Real deltaZoom )
SeekSeekSeek::~SeekSeekSeek	SeekSeekSeek.cpp	/^SeekSeekSeek::~SeekSeekSeek(void)$/;"	f	class:SeekSeekSeek	signature:(void)
SeekSeekSeek::~SeekSeekSeek	SeekSeekSeek.cpp~	/^SeekSeekSeek::~SeekSeekSeek(void)$/;"	f	class:SeekSeekSeek	signature:(void)
WIN32_LEAN_AND_MEAN	main.cpp	4;"	d	file:
WinMain	main.cpp	/^    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )$/;"	f	signature:( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
addRigidBody	tmp.cpp	/^discreteDynamicsWorld->addRigidBody( rigidBody );$/;"	p	file:	signature:( rigidBody )
addRigidBody	tmp.cpp~	/^discreteDynamicsWorld->addRigidBody(rigidBody);$/;"	p	file:	signature:(rigidBody)
addTime	GamePlayer.cpp	/^void GamePlayer::addTime( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
addTime	GamePlayer.cpp~	/^void GamePlayer::addTime( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
addTime	PhysicsFrameListener.cpp_	/^void PhysicsFrameListener::addTime( Real deltaTime )$/;"	f	class:PhysicsFrameListener	signature:( Real deltaTime )
addTime	PhysicsFrameListener.cpp_backup	/^void PhysicsFrameListener::addTime( Real deltaTime )$/;"	f	class:PhysicsFrameListener	signature:( Real deltaTime )
canJump	DynamicCharacterController.cpp	/^bool DynamicCharacterController::canJump () const$/;"	f	class:DynamicCharacterController	signature:() const
chooseSceneManager	GameBase.cpp	/^void GameBase::chooseSceneManager(void)$/;"	f	class:GameBase	signature:(void)
chooseSceneManager	GameBase.cpp~	/^void GameBase::chooseSceneManager(void)$/;"	f	class:GameBase	signature:(void)
cleanMap	GameMap.cpp	/^void GameMap::cleanMap(void)$/;"	f	class:GameMap	signature:(void)
cleanMap	GameMap.cpp~	/^void GameMap::cleanMap(void)$/;"	f	class:GameMap	signature:(void)
clientMoveAndDisplay	CharacterDemo.cpp	/^void CharacterDemo::clientMoveAndDisplay()$/;"	f	class:CharacterDemo	signature:()
clientMoveAndDisplay	CharacterDemo.cpp~	/^void CharacterDemo::clientMoveAndDisplay()$/;"	f	class:CharacterDemo	signature:()
clientResetScene	CharacterDemo.cpp	/^void CharacterDemo::clientResetScene()$/;"	f	class:CharacterDemo	signature:()
clientResetScene	CharacterDemo.cpp~	/^void CharacterDemo::clientResetScene()$/;"	f	class:CharacterDemo	signature:()
config	tmp.cpp	/^Ogre::ConfigFile config;$/;"	v
config	tmp.cpp~	/^Ogre::ConfigFile config;$/;"	v
configStream	tmp.cpp	/^Ogre::DataStreamPtr configStream = Ogre::ResourceGroupManager::getSingleton().openResource( terrainFileStr, Ogre::ResourceGroupManager::getSingleton().getWorldResourceGroupName() );$/;"	v
configStream	tmp.cpp~	/^Ogre::DataStreamPtr configStream = Ogre::ResourceGroupManager::getSingleton().openResource( terrainFileStr, Ogre::ResourceGroupManager::getSingleton().getWorldResourceGroupName() );$/;"	v
configure	GameBase.cpp	/^bool GameBase::configure(void)$/;"	f	class:GameBase	signature:(void)
configure	GameBase.cpp~	/^bool GameBase::configure(void)$/;"	f	class:GameBase	signature:(void)
configureTerrainDefaults	GameMap.cpp	/^void GameMap::configureTerrainDefaults( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )$/;"	f	class:GameMap	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )
configureTerrainDefaults	GameMap.cpp~	/^void GameMap::configureTerrainDefaults( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )$/;"	f	class:GameMap	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )
createBox	PhysicsFrameListener.cpp	/^void PhysicsFrameListener::createBox( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )
createBox	PhysicsFrameListener.cpp_	/^void PhysicsFrameListener::createBox( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )
createBox	PhysicsFrameListener.cpp_backup	/^void PhysicsFrameListener::createBox( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )
createBox	PhysicsFrameListener.cpp~	/^void PhysicsFrameListener::createBox( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Camera * mCamera )
createBoxShape	PhysicsFrameListener.cpp	/^void PhysicsFrameListener::createBoxShape( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic \/*= false*\/ )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic )
createBoxShape	PhysicsFrameListener.cpp_	/^void PhysicsFrameListener::createBoxShape( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic \/*= false*\/ )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic )
createBoxShape	PhysicsFrameListener.cpp_backup	/^void PhysicsFrameListener::createBoxShape( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic \/*= false*\/ )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic )
createBoxShape	PhysicsFrameListener.cpp~	/^void PhysicsFrameListener::createBoxShape( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic \/*= false*\/ )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic )
createCamera	SeekSeekSeek.cpp	/^void SeekSeekSeek::createCamera(void)$/;"	f	class:SeekSeekSeek	signature:(void)
createCamera	SeekSeekSeek.cpp~	/^void SeekSeekSeek::createCamera(void)$/;"	f	class:SeekSeekSeek	signature:(void)
createEnvir	SeekSeekSeek.cpp	/^void SeekSeekSeek::createEnvir(void)$/;"	f	class:SeekSeekSeek	signature:(void)
createEnvir	SeekSeekSeek.cpp~	/^void SeekSeekSeek::createEnvir(void)$/;"	f	class:SeekSeekSeek	signature:(void)
createFrameListener	GameBase.cpp	/^void GameBase::createFrameListener(void)$/;"	f	class:GameBase	signature:(void)
createFrameListener	GameBase.cpp~	/^void GameBase::createFrameListener(void)$/;"	f	class:GameBase	signature:(void)
createFrameListener	GameMap.cpp	/^void GameMap::createFrameListener( OgreBites::SdkTrayManager * pTrayMgr )$/;"	f	class:GameMap	signature:( OgreBites::SdkTrayManager * pTrayMgr )
createFrameListener	GameMap.cpp~	/^void GameMap::createFrameListener( OgreBites::SdkTrayManager * pTrayMgr )$/;"	f	class:GameMap	signature:( OgreBites::SdkTrayManager * pTrayMgr )
createFrameListener	SeekSeekSeek.cpp	/^void SeekSeekSeek::createFrameListener(void)$/;"	f	class:SeekSeekSeek	signature:(void)
createFrameListener	SeekSeekSeek.cpp~	/^void SeekSeekSeek::createFrameListener(void)$/;"	f	class:SeekSeekSeek	signature:(void)
createKinematicShape	PhysicsFrameListener.cpp_	/^void PhysicsFrameListener::createKinematicShape( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic \/*= false*\/ )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic )
createKinematicShape	PhysicsFrameListener.cpp_backup	/^void PhysicsFrameListener::createKinematicShape( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic \/*= false*\/ )$/;"	f	class:PhysicsFrameListener	signature:( Ogre::Entity * entity, Ogre::Vector3 position, bool bStatic )
createPhysicsPlayer	PhysicsFrameListener.cpp	/^void PhysicsFrameListener::createPhysicsPlayer()$/;"	f	class:PhysicsFrameListener	signature:()
createPhysicsPlayer	PhysicsFrameListener.cpp~	/^void PhysicsFrameListener::createPhysicsPlayer()$/;"	f	class:PhysicsFrameListener	signature:()
createPhysicsScene	PhysicsFrameListener.cpp	/^void PhysicsFrameListener::createPhysicsScene()$/;"	f	class:PhysicsFrameListener	signature:()
createPhysicsScene	PhysicsFrameListener.cpp~	/^void PhysicsFrameListener::createPhysicsScene()$/;"	f	class:PhysicsFrameListener	signature:()
createPhysicsTerrain	PhysicsFrameListener.cpp	/^void PhysicsFrameListener::createPhysicsTerrain()$/;"	f	class:PhysicsFrameListener	signature:()
createPhysicsTerrain	PhysicsFrameListener.cpp~	/^void PhysicsFrameListener::createPhysicsTerrain()$/;"	f	class:PhysicsFrameListener	signature:()
createPlayerPhysicsBody	PhysicsFrameListener.cpp_	/^void PhysicsFrameListener::createPlayerPhysicsBody( GamePlayer * pPlayer )$/;"	f	class:PhysicsFrameListener	signature:( GamePlayer * pPlayer )
createPlayerPhysicsBody	PhysicsFrameListener.cpp_backup	/^void PhysicsFrameListener::createPlayerPhysicsBody( GamePlayer * pPlayer )$/;"	f	class:PhysicsFrameListener	signature:( GamePlayer * pPlayer )
createResourceListener	GameBase.cpp	/^void GameBase::createResourceListener(void)$/;"	f	class:GameBase	signature:(void)
createResourceListener	GameBase.cpp~	/^void GameBase::createResourceListener(void)$/;"	f	class:GameBase	signature:(void)
createScene	SeekSeekSeek.cpp	/^void SeekSeekSeek::createScene(void)$/;"	f	class:SeekSeekSeek	signature:(void)
createScene	SeekSeekSeek.cpp~	/^void SeekSeekSeek::createScene(void)$/;"	f	class:SeekSeekSeek	signature:(void)
createViewports	SeekSeekSeek.cpp	/^void SeekSeekSeek::createViewports(void)$/;"	f	class:SeekSeekSeek	signature:(void)
createViewports	SeekSeekSeek.cpp~	/^void SeekSeekSeek::createViewports(void)$/;"	f	class:SeekSeekSeek	signature:(void)
debugDrawContacts	CharacterDemo.cpp	/^void	CharacterDemo::debugDrawContacts()$/;"	f	class:CharacterDemo	signature:()
debugDrawContacts	CharacterDemo.cpp~	/^void	CharacterDemo::debugDrawContacts()$/;"	f	class:CharacterDemo	signature:()
defineTerrain	GameMap.cpp	/^void GameMap::defineTerrain( long x, long y )$/;"	f	class:GameMap	signature:( long x, long y )
defineTerrain	GameMap.cpp~	/^void GameMap::defineTerrain( long x, long y )$/;"	f	class:GameMap	signature:( long x, long y )
destroy	DynamicCharacterController.cpp	/^void DynamicCharacterController::destroy ()$/;"	f	class:DynamicCharacterController	signature:()
destroyPhysicsWorld	PhysicsBase.cpp	/^void PhysicsBase::destroyPhysicsWorld()$/;"	f	class:PhysicsBase	signature:()
destroyPhysicsWorld	PhysicsBase.cpp~	/^void PhysicsBase::destroyPhysicsWorld()$/;"	f	class:PhysicsBase	signature:()
destroyPhysicsWorld	PhysicsFrameListener.cpp	/^void PhysicsFrameListener::destroyPhysicsWorld()$/;"	f	class:PhysicsFrameListener	signature:()
destroyPhysicsWorld	PhysicsFrameListener.cpp~	/^void PhysicsFrameListener::destroyPhysicsWorld()$/;"	f	class:PhysicsFrameListener	signature:()
destroyScene	GameBase.cpp	/^void GameBase::destroyScene(void)$/;"	f	class:GameBase	signature:(void)
destroyScene	GameBase.cpp~	/^void GameBase::destroyScene(void)$/;"	f	class:GameBase	signature:(void)
destroyScene	SeekSeekSeek.cpp	/^void SeekSeekSeek::destroyScene(void)$/;"	f	class:SeekSeekSeek	signature:(void)
destroyScene	SeekSeekSeek.cpp~	/^void SeekSeekSeek::destroyScene(void)$/;"	f	class:SeekSeekSeek	signature:(void)
displayCallback	CharacterDemo.cpp	/^void CharacterDemo::displayCallback(void)$/;"	f	class:CharacterDemo	signature:(void)
displayCallback	CharacterDemo.cpp~	/^void CharacterDemo::displayCallback(void)$/;"	f	class:CharacterDemo	signature:(void)
fadeAnimations	GamePlayer.cpp	/^void GamePlayer::fadeAnimations( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
fadeAnimations	GamePlayer.cpp~	/^void GamePlayer::fadeAnimations( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
format	tags	/^!_TAG_FILE_FORMAT	2	\/extended format; --format=1 will not append ;" to lines\/$/;"	v
frameEnded	GameBase.cpp~	/^bool GameBase::frameEnded(const Ogre::FrameEvent& evt)$/;"	f	class:GameBase	signature:(const Ogre::FrameEvent& evt)
frameEnded	PhysicsBase.cpp	/^bool PhysicsBase::frameEnded( const FrameEvent & evt )$/;"	f	class:PhysicsBase	signature:( const FrameEvent & evt )
frameEnded	PhysicsBase.cpp~	/^bool PhysicsBase::frameEnded( const FrameEvent & evt )$/;"	f	class:PhysicsBase	signature:( const FrameEvent & evt )
frameEnded	PhysicsFrameListener.cpp_	/^bool PhysicsFrameListener::frameEnded( const FrameEvent & evt )$/;"	f	class:PhysicsFrameListener	signature:( const FrameEvent & evt )
frameEnded	PhysicsFrameListener.cpp_backup	/^bool PhysicsFrameListener::frameEnded( const FrameEvent & evt )$/;"	f	class:PhysicsFrameListener	signature:( const FrameEvent & evt )
frameRenderingQueued	GameBase.cpp	/^bool GameBase::frameRenderingQueued(const Ogre::FrameEvent& evt)$/;"	f	class:GameBase	signature:(const Ogre::FrameEvent& evt)
frameRenderingQueued	GameBase.cpp~	/^bool GameBase::frameRenderingQueued(const Ogre::FrameEvent& evt)$/;"	f	class:GameBase	signature:(const Ogre::FrameEvent& evt)
frameRenderingQueued	GameMap.cpp	/^void GameMap::frameRenderingQueued( OgreBites::SdkTrayManager * pTrayMgr )$/;"	f	class:GameMap	signature:( OgreBites::SdkTrayManager * pTrayMgr )
frameRenderingQueued	GameMap.cpp~	/^void GameMap::frameRenderingQueued( OgreBites::SdkTrayManager * pTrayMgr )$/;"	f	class:GameMap	signature:( OgreBites::SdkTrayManager * pTrayMgr )
frameRenderingQueued	SeekSeekSeek.cpp	/^bool SeekSeekSeek::frameRenderingQueued(const Ogre::FrameEvent& evt)$/;"	f	class:SeekSeekSeek	signature:(const Ogre::FrameEvent& evt)
frameRenderingQueued	SeekSeekSeek.cpp~	/^bool SeekSeekSeek::frameRenderingQueued(const Ogre::FrameEvent& evt)$/;"	f	class:SeekSeekSeek	signature:(const Ogre::FrameEvent& evt)
frameStarted	GameBase.cpp~	/^bool GameBase::frameStarted(const Ogre::FrameEvent& evt)$/;"	f	class:GameBase	signature:(const Ogre::FrameEvent& evt)
frameStarted	PhysicsBase.cpp	/^bool PhysicsBase::frameStarted( const FrameEvent & evt )$/;"	f	class:PhysicsBase	signature:( const FrameEvent & evt )
frameStarted	PhysicsBase.cpp~	/^bool PhysicsBase::frameStarted( const FrameEvent & evt )$/;"	f	class:PhysicsBase	signature:( const FrameEvent & evt )
frameStarted	PhysicsFrameListener.cpp_	/^bool PhysicsFrameListener::frameStarted( const FrameEvent & evt )$/;"	f	class:PhysicsFrameListener	signature:( const FrameEvent & evt )
frameStarted	PhysicsFrameListener.cpp_backup	/^bool PhysicsFrameListener::frameStarted( const FrameEvent & evt )$/;"	f	class:PhysicsFrameListener	signature:( const FrameEvent & evt )
gBackward	CharacterDemo.cpp	/^static int gBackward = 0;$/;"	v	file:
gBackward	CharacterDemo.cpp~	/^static int gBackward = 0;$/;"	v	file:
gBackward	PhysicsFrameListener.cpp	/^static int gBackward = 0;$/;"	v	file:
gBackward	PhysicsFrameListener.cpp~	/^static int gBackward = 0;$/;"	v	file:
gForward	CharacterDemo.cpp	/^static int gForward = 0;$/;"	v	file:
gForward	CharacterDemo.cpp~	/^static int gForward = 0;$/;"	v	file:
gForward	PhysicsFrameListener.cpp	/^static int gForward = 0;$/;"	v	file:
gForward	PhysicsFrameListener.cpp~	/^static int gForward = 0;$/;"	v	file:
gJump	CharacterDemo.cpp	/^static int gJump = 0;$/;"	v	file:
gJump	CharacterDemo.cpp~	/^static int gJump = 0;$/;"	v	file:
gJump	PhysicsFrameListener.cpp	/^static int gJump = 0;$/;"	v	file:
gJump	PhysicsFrameListener.cpp~	/^static int gJump = 0;$/;"	v	file:
gLeft	CharacterDemo.cpp	/^static int gLeft = 0;$/;"	v	file:
gLeft	CharacterDemo.cpp~	/^static int gLeft = 0;$/;"	v	file:
gLeft	PhysicsFrameListener.cpp	/^static int gLeft = 0;$/;"	v	file:
gLeft	PhysicsFrameListener.cpp~	/^static int gLeft = 0;$/;"	v	file:
gRight	CharacterDemo.cpp	/^static int gRight = 0;$/;"	v	file:
gRight	CharacterDemo.cpp~	/^static int gRight = 0;$/;"	v	file:
gRight	PhysicsFrameListener.cpp	/^static int gRight = 0;$/;"	v	file:
gRight	PhysicsFrameListener.cpp~	/^static int gRight = 0;$/;"	v	file:
getCharacterNode	KinematicCharacter.cpp	/^Ogre::SceneNode * KinematicCharacter::getCharacterNode()$/;"	f	class:KinematicCharacter	signature:()
getCharacterNode	KinematicCharacter.cpp~	/^Ogre::SceneNode * KinematicCharacter::getCharacterNode()$/;"	f	class:KinematicCharacter	signature:()
getCollisionObject	DynamicCharacterController.cpp	/^btCollisionObject* DynamicCharacterController::getCollisionObject ()$/;"	f	class:DynamicCharacterController	signature:()
getIdentity	tmp.cpp	/^collisionShape->getAabb( btTransform::getIdentity(), min, max );$/;"	p	file:	signature:()
getIdentity	tmp.cpp~	/^collisionShape->getAabb( btTransform::getIdentity(), min, max );$/;"	p	file:	signature:()
getTerrainImage	GameMap.cpp	/^void getTerrainImage( bool flipX, bool flipY, Ogre::Image & img )$/;"	f	signature:( bool flipX, bool flipY, Ogre::Image & img )
getTerrainImage	GameMap.cpp~	/^void getTerrainImage( bool flipX, bool flipY, Ogre::Image & img )$/;"	f	signature:( bool flipX, bool flipY, Ogre::Image & img )
getWorldTransform	MotionState.cpp	/^void MotionState::getWorldTransform( btTransform & pWorldTrans ) const$/;"	f	class:MotionState	signature:( btTransform & pWorldTrans ) const
go	GameBase.cpp	/^void GameBase::go(void)$/;"	f	class:GameBase	signature:(void)
go	GameBase.cpp~	/^void GameBase::go(void)$/;"	f	class:GameBase	signature:(void)
heightScale	tmp.cpp	/^btScalar heightScale = maxHeight \/ 256;$/;"	v
heightScale	tmp.cpp~	/^btScalar heightScale = maxHeight \/ 256;$/;"	v
i	PhysicsBase.cpp	/^static int i = 0; \/\/ Debug Flag$/;"	v	file:
i	PhysicsBase.cpp~	/^static int i = 0; \/\/ Debug Flag$/;"	v	file:
imgFile	tmp.cpp	/^Ogre::String imgFile = config.getSetting("Heightmap.image");$/;"	v
imgFile	tmp.cpp~	/^Ogre::String imgFile = config.getSetting("Heightmap.image");$/;"	v
initBlendMaps	GameMap.cpp	/^void GameMap::initBlendMaps( Ogre::Terrain * terrain )$/;"	f	class:GameMap	signature:( Ogre::Terrain * terrain )
initBlendMaps	GameMap.cpp~	/^void GameMap::initBlendMaps( Ogre::Terrain * terrain )$/;"	f	class:GameMap	signature:( Ogre::Terrain * terrain )
initMap	GameMap.cpp	/^void GameMap::initMap( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )$/;"	f	class:GameMap	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )
initMap	GameMap.cpp~	/^void GameMap::initMap( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )$/;"	f	class:GameMap	signature:( Ogre::SceneManager * pSceneMgr, Ogre::Light * pLight )
initPhysics	CharacterDemo.cpp	/^void CharacterDemo::initPhysics()$/;"	f	class:CharacterDemo	signature:()
initPhysics	CharacterDemo.cpp~	/^void CharacterDemo::initPhysics()$/;"	f	class:CharacterDemo	signature:()
initPhysicsWorld	PhysicsBase.cpp	/^void PhysicsBase::initPhysicsWorld()$/;"	f	class:PhysicsBase	signature:()
initPhysicsWorld	PhysicsBase.cpp~	/^void PhysicsBase::initPhysicsWorld()$/;"	f	class:PhysicsBase	signature:()
injectKeyDown	GamePlayer.cpp	/^void GamePlayer::injectKeyDown( const OIS::KeyEvent & evt )$/;"	f	class:GamePlayer	signature:( const OIS::KeyEvent & evt )
injectKeyDown	GamePlayer.cpp~	/^void GamePlayer::injectKeyDown( const OIS::KeyEvent & evt )$/;"	f	class:GamePlayer	signature:( const OIS::KeyEvent & evt )
injectKeyUp	GamePlayer.cpp	/^void GamePlayer::injectKeyUp( const OIS::KeyEvent & evt )$/;"	f	class:GamePlayer	signature:( const OIS::KeyEvent & evt )
injectKeyUp	GamePlayer.cpp~	/^void GamePlayer::injectKeyUp( const OIS::KeyEvent & evt )$/;"	f	class:GamePlayer	signature:( const OIS::KeyEvent & evt )
injectMouseDown	GamePlayer.cpp	/^void GamePlayer::injectMouseDown( const OIS::MouseEvent & evt, OIS::MouseButtonID id )$/;"	f	class:GamePlayer	signature:( const OIS::MouseEvent & evt, OIS::MouseButtonID id )
injectMouseDown	GamePlayer.cpp~	/^void GamePlayer::injectMouseDown( const OIS::MouseEvent & evt, OIS::MouseButtonID id )$/;"	f	class:GamePlayer	signature:( const OIS::MouseEvent & evt, OIS::MouseButtonID id )
jump	DynamicCharacterController.cpp	/^void DynamicCharacterController::jump ()$/;"	f	class:DynamicCharacterController	signature:()
keyDown	CharacterInputListener.cpp	/^void CharacterInputListener::keyDown( const KeyEvent & evt )$/;"	f	class:CharacterInputListener	signature:( const KeyEvent & evt )
keyDown	CharacterInputListener.cpp~	/^void CharacterInputListener::keyDown( const KeyEvent & evt )$/;"	f	class:CharacterInputListener	signature:( const KeyEvent & evt )
keyDown	PhysicsBase.cpp	/^void PhysicsBase::keyDown( const OIS::KeyEvent & evt )$/;"	f	class:PhysicsBase	signature:( const OIS::KeyEvent & evt )
keyDown	PhysicsBase.cpp~	/^void PhysicsBase::keyDown( const OIS::KeyEvent & evt )$/;"	f	class:PhysicsBase	signature:( const OIS::KeyEvent & evt )
keyPressed	GameBase.cpp	/^bool GameBase::keyPressed( const OIS::KeyEvent &evt )$/;"	f	class:GameBase	signature:( const OIS::KeyEvent &evt )
keyPressed	GameBase.cpp~	/^bool GameBase::keyPressed( const OIS::KeyEvent &evt )$/;"	f	class:GameBase	signature:( const OIS::KeyEvent &evt )
keyPressed	SeekSeekSeek.cpp	/^bool SeekSeekSeek::keyPressed( const OIS::KeyEvent & evt )$/;"	f	class:SeekSeekSeek	signature:( const OIS::KeyEvent & evt )
keyPressed	SeekSeekSeek.cpp~	/^bool SeekSeekSeek::keyPressed( const OIS::KeyEvent & evt )$/;"	f	class:SeekSeekSeek	signature:( const OIS::KeyEvent & evt )
keyReleased	GameBase.cpp	/^bool GameBase::keyReleased( const OIS::KeyEvent & evt )$/;"	f	class:GameBase	signature:( const OIS::KeyEvent & evt )
keyReleased	GameBase.cpp~	/^bool GameBase::keyReleased( const OIS::KeyEvent & evt )$/;"	f	class:GameBase	signature:( const OIS::KeyEvent & evt )
keyReleased	SeekSeekSeek.cpp	/^bool SeekSeekSeek::keyReleased( const OIS::KeyEvent & evt )$/;"	f	class:SeekSeekSeek	signature:( const OIS::KeyEvent & evt )
keyReleased	SeekSeekSeek.cpp~	/^bool SeekSeekSeek::keyReleased( const OIS::KeyEvent & evt )$/;"	f	class:SeekSeekSeek	signature:( const OIS::KeyEvent & evt )
keyUp	CharacterInputListener.cpp	/^void CharacterInputListener::keyUp( const KeyEvent & evt )$/;"	f	class:CharacterInputListener	signature:( const KeyEvent & evt )
keyUp	CharacterInputListener.cpp~	/^void CharacterInputListener::keyUp( const KeyEvent & evt )$/;"	f	class:CharacterInputListener	signature:( const KeyEvent & evt )
keyUp	PhysicsBase.cpp	/^void PhysicsBase::keyUp( const OIS::KeyEvent & evt )$/;"	f	class:PhysicsBase	signature:( const OIS::KeyEvent & evt )
keyUp	PhysicsBase.cpp~	/^void PhysicsBase::keyUp( const OIS::KeyEvent & evt )$/;"	f	class:PhysicsBase	signature:( const OIS::KeyEvent & evt )
load	tmp.cpp	/^config.load( configStream );$/;"	p	file:	signature:( configStream )
load	tmp.cpp	/^heightmap.load( imgFile, Ogre::ResourceGroupManager::getSingleton().getWorldResourceGroupName() );$/;"	p	file:	signature:( imgFile, Ogre::ResourceGroupManager::getSingleton().getWorldResourceGroupName() )
load	tmp.cpp~	/^config.load( configStream );$/;"	p	file:	signature:( configStream )
load	tmp.cpp~	/^heightmap.load( imgFile, Ogre::ResourceGroupManager::getSingleton().getWorldResourceGroupName() );$/;"	p	file:	signature:( imgFile, Ogre::ResourceGroupManager::getSingleton().getWorldResourceGroupName() )
loadResources	GameBase.cpp	/^void GameBase::loadResources(void)$/;"	f	class:GameBase	signature:(void)
loadResources	GameBase.cpp~	/^void GameBase::loadResources(void)$/;"	f	class:GameBase	signature:(void)
mDirBackward	PhysicsBase.cpp	/^static int mDirBackward = 0;$/;"	v	file:
mDirBackward	PhysicsBase.cpp~	/^static int mDirBackward = 0;$/;"	v	file:
mDirForward	PhysicsBase.cpp	/^static int mDirForward = 0;$/;"	v	file:
mDirForward	PhysicsBase.cpp~	/^static int mDirForward = 0;$/;"	v	file:
mDirLeft	PhysicsBase.cpp	/^static int mDirLeft = 0;$/;"	v	file:
mDirLeft	PhysicsBase.cpp~	/^static int mDirLeft = 0;$/;"	v	file:
mDirRight	PhysicsBase.cpp	/^static int mDirRight = 0;$/;"	v	file:
mDirRight	PhysicsBase.cpp~	/^static int mDirRight = 0;$/;"	v	file:
mJump	PhysicsBase.cpp	/^static int mJump = 0;$/;"	v	file:
mJump	PhysicsBase.cpp~	/^static int mJump = 0;$/;"	v	file:
max	tmp.cpp	/^btVector3 min, max;$/;"	v
max	tmp.cpp	/^collisionShape->getAabb( btTransform::getIdentity(), min, max );$/;"	v
max	tmp.cpp~	/^btVector3 min, max;$/;"	v
max	tmp.cpp~	/^collisionShape->getAabb( btTransform::getIdentity(), min, max );$/;"	v
maxHeight	tmp.cpp	/^btScalar maxHeight = atof( maxHeightStr.c_str() );$/;"	v
maxHeight	tmp.cpp~	/^btScalar maxHeight = atof( maxHeightStr.c_str() );$/;"	v
maxHeightStr	tmp.cpp	/^Ogre::String maxHeightStr = config.getSetting("MaxHeight");$/;"	v
maxHeightStr	tmp.cpp~	/^Ogre::String maxHeightStr = config.getSetting("MaxHeight");$/;"	v
maxOverlap	CharacterDemo.cpp	/^const int maxOverlap = 65535;$/;"	v
maxOverlap	CharacterDemo.cpp~	/^const int maxOverlap = 65535;$/;"	v
maxOverlap	PhysicsFrameListener.cpp	/^const int maxOverlap = 65535;$/;"	v
maxOverlap	PhysicsFrameListener.cpp~	/^const int maxOverlap = 65535;$/;"	v
maxProxies	CharacterDemo.cpp	/^const int maxProxies = 32766;$/;"	v
maxProxies	CharacterDemo.cpp~	/^const int maxProxies = 32766;$/;"	v
maxProxies	PhysicsFrameListener.cpp	/^const int maxProxies = 32766;$/;"	v
maxProxies	PhysicsFrameListener.cpp~	/^const int maxProxies = 32766;$/;"	v
min	tmp.cpp	/^btVector3 min, max;$/;"	v
min	tmp.cpp	/^collisionShape->getAabb( btTransform::getIdentity(), min, max );$/;"	v
min	tmp.cpp~	/^btVector3 min, max;$/;"	v
min	tmp.cpp~	/^collisionShape->getAabb( btTransform::getIdentity(), min, max );$/;"	v
mouseMoved	GameBase.cpp	/^bool GameBase::mouseMoved( const OIS::MouseEvent & evt )$/;"	f	class:GameBase	signature:( const OIS::MouseEvent & evt )
mouseMoved	GameBase.cpp~	/^bool GameBase::mouseMoved( const OIS::MouseEvent & evt )$/;"	f	class:GameBase	signature:( const OIS::MouseEvent & evt )
mouseMoved	SeekSeekSeek.cpp	/^bool SeekSeekSeek::mouseMoved( const OIS::MouseEvent & evt )$/;"	f	class:SeekSeekSeek	signature:( const OIS::MouseEvent & evt )
mouseMoved	SeekSeekSeek.cpp~	/^bool SeekSeekSeek::mouseMoved( const OIS::MouseEvent & evt )$/;"	f	class:SeekSeekSeek	signature:( const OIS::MouseEvent & evt )
mousePressed	GameBase.cpp	/^bool GameBase::mousePressed( const OIS::MouseEvent &evt, OIS::MouseButtonID id )$/;"	f	class:GameBase	signature:( const OIS::MouseEvent &evt, OIS::MouseButtonID id )
mousePressed	GameBase.cpp~	/^bool GameBase::mousePressed( const OIS::MouseEvent &evt, OIS::MouseButtonID id )$/;"	f	class:GameBase	signature:( const OIS::MouseEvent &evt, OIS::MouseButtonID id )
mousePressed	SeekSeekSeek.cpp	/^bool SeekSeekSeek::mousePressed( const OIS::MouseEvent & evt, OIS::MouseButtonID id )$/;"	f	class:SeekSeekSeek	signature:( const OIS::MouseEvent & evt, OIS::MouseButtonID id )
mousePressed	SeekSeekSeek.cpp~	/^bool SeekSeekSeek::mousePressed( const OIS::MouseEvent & evt, OIS::MouseButtonID id )$/;"	f	class:SeekSeekSeek	signature:( const OIS::MouseEvent & evt, OIS::MouseButtonID id )
mouseReleased	GameBase.cpp	/^bool GameBase::mouseReleased( const OIS::MouseEvent &evt, OIS::MouseButtonID id )$/;"	f	class:GameBase	signature:( const OIS::MouseEvent &evt, OIS::MouseButtonID id )
mouseReleased	GameBase.cpp~	/^bool GameBase::mouseReleased( const OIS::MouseEvent &evt, OIS::MouseButtonID id )$/;"	f	class:GameBase	signature:( const OIS::MouseEvent &evt, OIS::MouseButtonID id )
mouseReleased	SeekSeekSeek.cpp	/^bool SeekSeekSeek::mouseReleased( const OIS::MouseEvent & evt, OIS::MouseButtonID id )$/;"	f	class:SeekSeekSeek	signature:( const OIS::MouseEvent & evt, OIS::MouseButtonID id )
mouseReleased	SeekSeekSeek.cpp~	/^bool SeekSeekSeek::mouseReleased( const OIS::MouseEvent & evt, OIS::MouseButtonID id )$/;"	f	class:SeekSeekSeek	signature:( const OIS::MouseEvent & evt, OIS::MouseButtonID id )
onGround	DynamicCharacterController.cpp	/^bool DynamicCharacterController::onGround () const$/;"	f	class:DynamicCharacterController	signature:() const
playerStep	DynamicCharacterController.cpp	/^void DynamicCharacterController::playerStep (const btCollisionWorld* dynaWorld,btScalar dt,$/;"	f	class:DynamicCharacterController	signature:(const btCollisionWorld* dynaWorld,btScalar dt, int forward, int backward, int left, int right, int jump)
preStep	DynamicCharacterController.cpp	/^void DynamicCharacterController::preStep (const btCollisionWorld* collisionWorld)$/;"	f	class:DynamicCharacterController	signature:(const btCollisionWorld* collisionWorld)
registerPairCacheAndDispatcher	DynamicCharacterController.cpp	/^void DynamicCharacterController::registerPairCacheAndDispatcher (btOverlappingPairCache* pairCache, btCollisionDispatcher* dispatcher)$/;"	f	class:DynamicCharacterController	signature:(btOverlappingPairCache* pairCache, btCollisionDispatcher* dispatcher)
renderme	CharacterDemo.cpp	/^void CharacterDemo::renderme()$/;"	f	class:CharacterDemo	signature:()
renderme	CharacterDemo.cpp~	/^void CharacterDemo::renderme()$/;"	f	class:CharacterDemo	signature:()
reset	DynamicCharacterController.cpp	/^void DynamicCharacterController::reset ()$/;"	f	class:DynamicCharacterController	signature:()
setBaseAnimation	GamePlayer.cpp	/^void GamePlayer::setBaseAnimation( AnimID id, bool reset \/*= false*\/ )$/;"	f	class:GamePlayer	signature:( AnimID id, bool reset )
setBaseAnimation	GamePlayer.cpp~	/^void GamePlayer::setBaseAnimation( AnimID id, bool reset \/*= false*\/ )$/;"	f	class:GamePlayer	signature:( AnimID id, bool reset )
setCharacterWalkDirection	KinematicCharacter.cpp	/^void KinematicCharacter::setCharacterWalkDirection( const btVector3 & pWalkDirection )$/;"	f	class:KinematicCharacter	signature:( const btVector3 & pWalkDirection )
setLocalScaling	tmp.cpp	/^collisionShape->setLocalScaling( localScaling );$/;"	p	file:	signature:( localScaling )
setLocalScaling	tmp.cpp~	/^collisionShape->setLocalScaling( localScaling );$/;"	p	file:	signature:( localScaling )
setNode	MotionState.cpp	/^void MotionState::setNode( Ogre::SceneNode * pNode )$/;"	f	class:MotionState	signature:( Ogre::SceneNode * pNode )
setPlayerPosition	MotionState.cpp	/^void MotionState::setPlayerPosition( btTransform & pCurrentPos )$/;"	f	class:MotionState	signature:( btTransform & pCurrentPos )
setTopAnimation	GamePlayer.cpp	/^void GamePlayer::setTopAnimation( AnimID id, bool reset \/*= false*\/ )$/;"	f	class:GamePlayer	signature:( AnimID id, bool reset )
setTopAnimation	GamePlayer.cpp~	/^void GamePlayer::setTopAnimation( AnimID id, bool reset \/*= false*\/ )$/;"	f	class:GamePlayer	signature:( AnimID id, bool reset )
setWorldGeometry	tmp.cpp	/^terrainSceneManager->setWorldGeometry( terrainFileStr );$/;"	p	file:	signature:( terrainFileStr )
setWorldGeometry	tmp.cpp~	/^terrainSceneManager->setWorldGeometry( terrainFileStr );$/;"	p	file:	signature:( terrainFileStr )
setWorldTransform	KinematicCharacter.cpp	/^void KinematicCharacter::setWorldTransform( const btTransform & pWorldTrans )$/;"	f	class:KinematicCharacter	signature:( const btTransform & pWorldTrans )
setWorldTransform	KinematicCharacter.cpp~	/^void KinematicCharacter::setWorldTransform( const btTransform & pWorldTrans )$/;"	f	class:KinematicCharacter	signature:( const btTransform & pWorldTrans )
setWorldTransform	MotionState.cpp	/^void MotionState::setWorldTransform( const btTransform & pWorldTrans )$/;"	f	class:MotionState	signature:( const btTransform & pWorldTrans )
setX	tmp.cpp	/^localScaling.setX( vScaleX );$/;"	p	file:	signature:( vScaleX )
setX	tmp.cpp~	/^localScaling.setX( vScaleX );$/;"	p	file:	signature:( vScaleX )
setZ	tmp.cpp	/^localScaling.setZ( vScaleZ );$/;"	p	file:	signature:( vScaleZ )
setZ	tmp.cpp~	/^localScaling.setZ( vScaleZ );$/;"	p	file:	signature:( vScaleZ )
setup	DynamicCharacterController.cpp	/^void DynamicCharacterController::setup (btScalar height, btScalar width, btScalar stepHeight)$/;"	f	class:DynamicCharacterController	signature:(btScalar height, btScalar width, btScalar stepHeight)
setup	GameBase.cpp	/^bool GameBase::setup(void)$/;"	f	class:GameBase	signature:(void)
setup	GameBase.cpp~	/^bool GameBase::setup(void)$/;"	f	class:GameBase	signature:(void)
setupAnimations	GamePlayer.cpp	/^void GamePlayer::setupAnimations()$/;"	f	class:GamePlayer	signature:()
setupAnimations	GamePlayer.cpp~	/^void GamePlayer::setupAnimations()$/;"	f	class:GamePlayer	signature:()
setupBody	GamePlayer.cpp	/^void GamePlayer::setupBody( SceneManager * pSceneMgr )$/;"	f	class:GamePlayer	signature:( SceneManager * pSceneMgr )
setupBody	GamePlayer.cpp~	/^void GamePlayer::setupBody( SceneManager * pSceneMgr )$/;"	f	class:GamePlayer	signature:( SceneManager * pSceneMgr )
setupResources	GameBase.cpp	/^void GameBase::setupResources(void)$/;"	f	class:GameBase	signature:(void)
setupResources	GameBase.cpp~	/^void GameBase::setupResources(void)$/;"	f	class:GameBase	signature:(void)
specialKeyboard	CharacterDemo.cpp	/^void CharacterDemo::specialKeyboard( int key, int x, int y )$/;"	f	class:CharacterDemo	signature:( int key, int x, int y )
specialKeyboard	CharacterDemo.cpp~	/^void CharacterDemo::specialKeyboard( int key, int x, int y )$/;"	f	class:CharacterDemo	signature:( int key, int x, int y )
specialKeyboardUp	CharacterDemo.cpp	/^void CharacterDemo::specialKeyboardUp( int key, int x, int y )$/;"	f	class:CharacterDemo	signature:( int key, int x, int y )
specialKeyboardUp	CharacterDemo.cpp~	/^void CharacterDemo::specialKeyboardUp( int key, int x, int y )$/;"	f	class:CharacterDemo	signature:( int key, int x, int y )
state	tmp.cpp	/^BtOgre::RigidBodyState * state = new BtOgre::RigidBodyState( sceneNode, btTransform(btQuaternion(0, 0, 0, 1), btVector3(0, 0, 0)) );$/;"	v
state	tmp.cpp~	/^BtOgre::RigidBodyState* state = new BtOgre::RigidBodyState(sceneNode, btTransform(btQuaternion(0, 0, 0, 1), btVector3(0, 0, 0)));$/;"	v
toOgre	tmp.cpp	/^sceneNode->setPosition( BtOgre::Convert::toOgre( min ) );$/;"	p	file:	signature:(min )
toOgre	tmp.cpp~	/^sceneNode->setPosition( BtOgre::Convert::toOgre( min ) );$/;"	p	file:	signature:(min )
updateAnimations	GamePlayer.cpp	/^void GamePlayer::updateAnimations( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
updateAnimations	GamePlayer.cpp~	/^void GamePlayer::updateAnimations( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
updateBody	GamePlayer.cpp	/^void GamePlayer::updateBody( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
updateBody	GamePlayer.cpp~	/^void GamePlayer::updateBody( Real deltaTime )$/;"	f	class:GamePlayer	signature:( Real deltaTime )
updateCamera	CharacterDemo.cpp	/^void	CharacterDemo::updateCamera()$/;"	f	class:CharacterDemo	signature:()
updateCamera	CharacterDemo.cpp~	/^void	CharacterDemo::updateCamera()$/;"	f	class:CharacterDemo	signature:()
updateCamera	SeekSeekSeek.cpp	/^void SeekSeekSeek::updateCamera( Real deltaTime )$/;"	f	class:SeekSeekSeek	signature:( Real deltaTime )
updateCamera	SeekSeekSeek.cpp~	/^void SeekSeekSeek::updateCamera( Real deltaTime )$/;"	f	class:SeekSeekSeek	signature:( Real deltaTime )
updateCameraGoal	SeekSeekSeek.cpp	/^void SeekSeekSeek::updateCameraGoal( Real deltaYaw, Real deltaPitch, Real deltaZoom )$/;"	f	class:SeekSeekSeek	signature:( Real deltaYaw, Real deltaPitch, Real deltaZoom )
updateCameraGoal	SeekSeekSeek.cpp~	/^void SeekSeekSeek::updateCameraGoal( Real deltaYaw, Real deltaPitch, Real deltaZoom )$/;"	f	class:SeekSeekSeek	signature:( Real deltaYaw, Real deltaPitch, Real deltaZoom )
updatePhysicsPlayer	PhysicsBase.cpp	/^void PhysicsBase::updatePhysicsPlayer()$/;"	f	class:PhysicsBase	signature:()
updatePhysicsPlayer	PhysicsBase.cpp~	/^void PhysicsBase::updatePhysicsPlayer()$/;"	f	class:PhysicsBase	signature:()
updatePhysicsPlayer	PhysicsFrameListener.cpp	/^void PhysicsFrameListener::updatePhysicsPlayer()$/;"	f	class:PhysicsFrameListener	signature:()
updatePhysicsPlayer	PhysicsFrameListener.cpp~	/^void PhysicsFrameListener::updatePhysicsPlayer()$/;"	f	class:PhysicsFrameListener	signature:()
updatePlayerPhysicsBody	PhysicsFrameListener.cpp_	/^void PhysicsFrameListener::updatePlayerPhysicsBody( Real deltaTime )$/;"	f	class:PhysicsFrameListener	signature:( Real deltaTime )
updatePlayerPhysicsBody	PhysicsFrameListener.cpp_backup	/^void PhysicsFrameListener::updatePlayerPhysicsBody( Real deltaTime )$/;"	f	class:PhysicsFrameListener	signature:( Real deltaTime )
vScaleX	tmp.cpp	/^btScalar vScaleX = atof( config.getSetting("PageWorldX").c_str() );$/;"	v
vScaleX	tmp.cpp~	/^btScalar vScaleX = atof( config.getSetting("PageWorldX").c_str() );$/;"	v
vScaleZ	tmp.cpp	/^btScalar vScaleZ = atof( config.getSetting("PageWorldZ").c_str() );$/;"	v
vScaleZ	tmp.cpp~	/^btScalar vScaleZ = atof( config.getSetting("PageWorldZ").c_str() );$/;"	v
warp	DynamicCharacterController.cpp	/^void DynamicCharacterController::warp (const btVector3& origin)$/;"	f	class:DynamicCharacterController	signature:(const btVector3& origin)
width	tmp.cpp	/^int width = atoi(widthStr.c_str());$/;"	v
width	tmp.cpp~	/^int width = atoi(widthStr.c_str());$/;"	v
widthStr	tmp.cpp	/^Ogre::String widthStr = config.getSetting("PageSize");$/;"	v
widthStr	tmp.cpp~	/^Ogre::String widthStr = config.getSetting("PageSize");$/;"	v
windowClosed	GameBase.cpp	/^void GameBase::windowClosed(Ogre::RenderWindow* rw)$/;"	f	class:GameBase	signature:(Ogre::RenderWindow* rw)
windowClosed	GameBase.cpp~	/^void GameBase::windowClosed(Ogre::RenderWindow* rw)$/;"	f	class:GameBase	signature:(Ogre::RenderWindow* rw)
windowResized	GameBase.cpp	/^void GameBase::windowResized(Ogre::RenderWindow* rw)$/;"	f	class:GameBase	signature:(Ogre::RenderWindow* rw)
windowResized	GameBase.cpp~	/^void GameBase::windowResized(Ogre::RenderWindow* rw)$/;"	f	class:GameBase	signature:(Ogre::RenderWindow* rw)
~CharacterDemo	CharacterDemo.cpp	/^CharacterDemo::~CharacterDemo()$/;"	f	class:CharacterDemo	signature:()
~CharacterDemo	CharacterDemo.cpp~	/^CharacterDemo::~CharacterDemo()$/;"	f	class:CharacterDemo	signature:()
~CharacterInputListener	CharacterInputListener.cpp	/^CharacterInputListener::~CharacterInputListener()$/;"	f	class:CharacterInputListener	signature:()
~CharacterInputListener	CharacterInputListener.cpp~	/^CharacterInputListener::~CharacterInputListener()$/;"	f	class:CharacterInputListener	signature:()
~DynamicCharacterController	DynamicCharacterController.cpp	/^DynamicCharacterController::~DynamicCharacterController ()$/;"	f	class:DynamicCharacterController	signature:()
~GameBase	GameBase.cpp	/^GameBase::~GameBase(void)$/;"	f	class:GameBase	signature:(void)
~GameBase	GameBase.cpp~	/^GameBase::~GameBase(void)$/;"	f	class:GameBase	signature:(void)
~GameMap	GameMap.cpp	/^GameMap::~GameMap(void)$/;"	f	class:GameMap	signature:(void)
~GameMap	GameMap.cpp~	/^GameMap::~GameMap(void)$/;"	f	class:GameMap	signature:(void)
~KinematicCharacter	KinematicCharacter.cpp	/^KinematicCharacter::~KinematicCharacter()$/;"	f	class:KinematicCharacter	signature:()
~KinematicCharacter	KinematicCharacter.cpp~	/^KinematicCharacter::~KinematicCharacter()$/;"	f	class:KinematicCharacter	signature:()
~MotionState	MotionState.cpp	/^MotionState::~MotionState()$/;"	f	class:MotionState	signature:()
~PhysicsBase	PhysicsBase.cpp	/^PhysicsBase::~PhysicsBase()$/;"	f	class:PhysicsBase	signature:()
~PhysicsBase	PhysicsBase.cpp~	/^PhysicsBase::~PhysicsBase()$/;"	f	class:PhysicsBase	signature:()
~PhysicsFrameListener	PhysicsFrameListener.cpp	/^PhysicsFrameListener::~PhysicsFrameListener()$/;"	f	class:PhysicsFrameListener	signature:()
~PhysicsFrameListener	PhysicsFrameListener.cpp_	/^PhysicsFrameListener::~PhysicsFrameListener()$/;"	f	class:PhysicsFrameListener	signature:()
~PhysicsFrameListener	PhysicsFrameListener.cpp_backup	/^PhysicsFrameListener::~PhysicsFrameListener()$/;"	f	class:PhysicsFrameListener	signature:()
~PhysicsFrameListener	PhysicsFrameListener.cpp~	/^PhysicsFrameListener::~PhysicsFrameListener()$/;"	f	class:PhysicsFrameListener	signature:()
~SeekSeekSeek	SeekSeekSeek.cpp	/^SeekSeekSeek::~SeekSeekSeek(void)$/;"	f	class:SeekSeekSeek	signature:(void)
~SeekSeekSeek	SeekSeekSeek.cpp~	/^SeekSeekSeek::~SeekSeekSeek(void)$/;"	f	class:SeekSeekSeek	signature:(void)
